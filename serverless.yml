service: cfpland-telegram-bot

provider:
  name: aws
  region: eu-west-1
  runtime: python3.7
  environment: 
    DATABASE_URL: ${env:DATABASE_URL}
    TELEGRAM_TOKEN: ${env:TELEGRAM_TOKEN}
    TELEGRAM_CFPLAND_CHANNEL: ${env:TELEGRAM_CFPLAND_CHANNEL}
    ENVIRONMENT: ${env:ENVIRONMENT}

functions:
  parse: 
    handler: cfpland_telegram_bot.parser.main.parse
    timeout: 30
    events:
      - schedule: cron(0 10 * * ? *)
    vpc:
      securityGroupIds:
        - sg-06ea07fa15e7613da
      subnetIds:
        - subnet-01595a21721d05a66
        - subnet-084fdc5a9a5fa3126
        - subnet-0e537c2e076614089

  telegram_bot:
    handler: cfpland_telegram_bot.bot.main.telegram_bot
    timeout: 30
    events:
      - http:
          path: /telegram_bot
          method: post
    vpc:
      securityGroupIds:
        - sg-06ea07fa15e7613da
      subnetIds:
        - subnet-01595a21721d05a66
        - subnet-084fdc5a9a5fa3126
        - subnet-0e537c2e076614089

  send_telegram_messages_to_channel:
    handler: cfpland_telegram_bot.bot.main.send_telegram_messages_to_channel
    timeout: 60
    events:
      - schedule: cron(0 11 * * ? *)
    vpc:
      securityGroupIds:
        - sg-06ea07fa15e7613da
      subnetIds:
        - subnet-01595a21721d05a66
        - subnet-084fdc5a9a5fa3126
        - subnet-0e537c2e076614089

  set_telegram_webhook:
    handler: cfpland_telegram_bot.bot.main.set_telegram_webhook

  send_metrics:
    handler: cfpland_telegram_bot.metrics.main.send_metrics
    events:
      - cloudwatchLog: '/aws/lambda/cfpland-telegram-bot-dev-parse'
      - cloudwatchLog: '/aws/lambda/cfpland-telegram-bot-dev-send_telegram_messages_to_channel'
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - 'cloudwatch:PutMetricData'
        # TODO: add specific resource
        Resource: '*'

plugins:
  - serverless-python-requirements
  - serverless-dotenv-plugin
  - serverless-iam-roles-per-function

custom:
  pythonRequirements:
    dockerizePip: 'non-linux'